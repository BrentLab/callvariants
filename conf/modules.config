/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

// default publishDir settings and misc processes
process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}

// output genome reference related files
process {
    withName: '.*:PREPARE_GENOME:.*' {
        publishDir = [
            enabled: params.debug,
            path: { "${params.outdir}/reference/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:PREPARE_GENOME:CONCATFASTA' {
        publishDir = [
            enabled: params.save_reference,
            path: { "${params.outdir}/reference/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.prefix = {"${meta.genome_name}"}
    }


    withName: '.*:PREPARE_GENOME:SAMTOOLS_FAIDX' {
        publishDir = [
            enabled: params.save_reference,
            path: { "${params.outdir}/reference" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

// ALIGN subworkflow
process {


    withName: BWAMEM2_MEM {
        publishDir = [
            enabled: params.save_intermediates,
            path: { "${params.outdir}/alignment/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = {"${meta.id}"}
    }

    // note that the input to this is actually sorted, but samtools_sort is run
    // later as it is part of a packaged nf-core subworkflow that i choose to
    // use without modification
    withName: PICARD_MARKDUPLICATES {
        publishDir = [
            enabled: params.save_intermediates,
            path: { "${params.outdir}/alignment/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.prefix = {"${meta.id}_markdups"}
    }

    withName: PICARD_ADDORREPLACEREADGROUPS{
        publishDir = [
            path: { "${params.outdir}/alignment" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.args = {[
            "-ID ${meta.id}",
            "-LB ${meta.group}",
            "-PL ${params.platform}",
            "-PU ${meta.genome_name}",
            "-SM ${meta.id}",
            "--VERBOSITY DEBUG"
        ].join(' ').trim()}

        ext.prefix = { "${meta.id}_markdups_tagged" }
    }

    withName: '.*:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_SORT' {
        publishDir = [
            enabled: false,
            path: { "${params.outdir}/alignment/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.prefix = { "${meta.id}_sorted_markdups_tagged" }
    }

    withName: '.*:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_INDEX' {
        publishDir = [
            path: { "${params.outdir}/alignment" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:SAMTOOLS_STATS' {
        publishDir = [
            path: { "${params.outdir}/alignment/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.prefix = {"${meta.id}_sorted_markdups_tagged"}
    }

    withName: '.*:SAMTOOLS_FLAGSTAT' {
        publishDir = [
            path: { "${params.outdir}/alignment/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.prefix = {"${meta.id}_sorted_markdups_tagged"}
    }

    withName: '.*:SAMTOOLS_IDXSTATS' {
        publishDir = [
            path: { "${params.outdir}/alignment/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = {"${meta.id}_sorted_markdups_tagged"}
    }
}

// CALL variants
process {

    withName: '.*:CALL:TIDDIT_SV' {
        publishDir = [[
            enabled: params.save_intermediates,
            path: { "${params.outdir}/variants/raw/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: '*.vcf'
        ],
        publishDir = [
            path: { "${params.outdir}/variants/raw/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: '*.tab'
        ]]

        ext.prefix = {"${meta.id}_tiddit"}
        ext.when = { !(meta.single_end) }

    }

    // the tiddit vcfs are zipped/indexed again after getting combined with
    // freebayes output
    withName: '.*:CALL:TABIX_BGZIPTABIX_TIDDIT' {
        publishDir = [
            enabled: params.debug,
            path: { "${params.outdir}/variants/raw/tiddit" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]

        ext.prefix = {"${meta.id}_${meta.variant_caller}"}

        ext.args2 = "-f"

    }

        withName: '.*:CNVPYTOR_COMPLETE:CNVPYTOR_IMPORTREADDEPTH' {
        publishDir = [
            enabled: params.save_intermediates,
            path: { "${params.outdir}/variants/cnvpytor/import_read_depth" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.prefix = {"${meta.id}"}
    }

    withName: '.*:CNVPYTOR_COMPLETE:CNVPYTOR_HISTOGRAM' {
        publishDir = [
            enabled: params.save_intermediates,
            path: { "${params.outdir}/variants/cnvpytor/histogram" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.prefix = {"${meta.id}"}

    }

    withName: '.*:CNVPYTOR_COMPLETE:CNVPYTOR_PARTITION' {
        publishDir = [
            path: { "${params.outdir}/variants/cnvpytor" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.prefix = {"${meta.id}"}

    }

    withName: '.*:CNVPYTOR_COMPLETE:CNVPYTOR_VIEW' {
        publishDir = [
            path: { "${params.outdir}/variants/cnvpytor" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.prefix = {"${meta.id}_raw"}

        ext.args = [
            output_format: 'tsv'
        ]

    }

    withName: '.*:CNVPYTOR_COMPLETE:CNVPYTOR_VIEW_TSV_FLTR' {
        publishDir = [
            path: { "${params.outdir}/variants/cnvpytor" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.prefix = {"${meta.id}_filtered"}

    }

    withName: '.*:CALL:FREEBAYES_.*' {
        publishDir = [
            enabled: params.save_intermediates,
            path: { "${params.outdir}/variants/raw/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.prefix = {"${meta.id}_freebayes_${meta.interval}"}

    }

    withName: '.*:CALL:GATK4_MERGEVCFS_.*' {
        publishDir = [
            enabled: params.save_intermediates,
            path: { "${params.outdir}/variants/raw/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.prefix = {"${meta.id}_${meta.variant_caller}"}

    }

    withName: SNPEFF_RAW {
        publishDir = [
            [
                enabled: params.save_intermediates,
                path: { "${params.outdir}/variants/raw/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: '*.vcf$'
            ]
        ]

        ext.prefix = {"${meta.id}_${meta.variant_caller}"}

    }

    withName: SNPEFF_FLTR {
        publishDir = [
            [
                enabled: params.save_intermediates,
                path: { "${params.outdir}/variants/filtered/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            ]
        ]

        ext.prefix = {"${meta.id}_${meta.variant_caller}_filtered"}

    }

    withName: '.*:CALL:BCFTOOLS_STATS_RAW' {
        publishDir = [
            path: { "${params.outdir}/variants/raw/bcftools_stats" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.prefix = {"${meta.id}_${meta.variant_caller}"}

    }

    // note: save these to the snpeff directory so that it is clear that they
    // have been annotated
    withName: '.*:CALL:VCFTOOLS' {
        publishDir = [
            enabled: params.debug,
            path: { "${params.outdir}/variants/filtered/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.prefix = {"${meta.id}_${meta.variant_caller}_filtered"}

    }

    withName: '.*:CALL:TABIX_BGZIPTABIX_RAW' {
        publishDir = [
            path: { "${params.outdir}/variants/raw" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.prefix = {"${meta.id}_${meta.variant_caller}"}
        ext.args2 = "-f"
    }

    withName: '.*:CALL:TABIX_BGZIPTABIX_FLTR' {
        publishDir = [
            path: { "${params.outdir}/variants/filtered" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.prefix = {"${meta.id}_${meta.variant_caller}_filtered"}
        ext.args2 = "-f"
    }

    withName: '.*:CALL:BCFTOOLS_STATS_FLTR' {
        publishDir = [
            path: { "${params.outdir}/variants/filtered/bcftools_stats" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.prefix = {"${meta.id}_${meta.variant_caller}_filtered"}

    }


}

